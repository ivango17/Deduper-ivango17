Ian VanGordon
10/3/2023
Deduper

Objectives:

    The objective of this assingment is to remove duplicated DNA sequences from RNA-seq after alignment.
    The input file will be a sorted (via sam tools) sam file and the data will be single end read sequences.



Background:

    Samfiles:

        Found information about sams at https://en.wikipedia.org/wiki/SAM_(file_format).
        To reference back to, here is a table containing the column information in a sam file:

            Col	Field	Type	Brief description
            1	QNAME	String	Query template NAME
            2	FLAG	Int	bitwise FLAG
            3	RNAME	String	References sequence NAME
            4	POS	Int	1- based leftmost mapping POSition
            5	MAPQ	Int	MAPping Quality
            6	CIGAR	String	CIGAR string
            7	RNEXT	String	Ref. name of the mate/next read
            8	PNEXT	Int	Position of the mate/next read
            9	TLEN	Int	observed Template LENgth
            10	SEQ	String	segment SEQuence
            11	QUAL	String	ASCII of Phred-scaled base QUALity+33


        Bitwise flag table:

            Integer	Binary	Description (Paired Read Interpretation)
            1	000000000001	template having multiple templates in sequencing (read is paired)
            2	000000000010	each segment properly aligned according to the aligner (read mapped in proper pair)
            4	000000000100	segment unmapped (read1 unmapped)
            8	000000001000	next segment in the template unmapped (read2 unmapped)
            16	000000010000	SEQ being reverse complemented (read1 reverse complemented)
            32	000000100000	SEQ of the next segment in the template being reverse complemented (read2 reverse complemented)
            64	000001000000	the first segment in the template (is read1)
            128	000010000000	the last segment in the template (is read2)
            256	000100000000	not primary alignment
            512	001000000000	alignment fails quality checks
            1024	010000000000	PCR or optical duplicate
            2048	100000000000	supplementary alignment (e.g. aligner specific, could be a portion of a split read or a tied region)


        CIGAR strings:

           Op BAM Description Consumes
        query
        Consumes
        reference
        M 0 alignment match (can be a sequence match or mismatch) yes yes
        I 1 insertion to the reference yes no
        D 2 deletion from the reference no yes
        N 3 skipped region from the reference no yes
        S 4 soft clipping (clipped sequences present in SEQ) yes no
        H 5 hard clipping (clipped sequences NOT present in SEQ) no no
        P 6 padding (silent deletion from padded reference) no no
        = 7 sequence match yes yes
        X 8 sequence mismatch yes yes


        Additional notes:

            The mapping position is the left most position on the plus strand.
            Position mappings are the first matching basepair in the sequence compared to the reference genome.




Psuedocode:

    Things that will need to be accounted for is soft clipping, the bitwise flag, starting postion (and chrom/scaffold), CIGAR strings.
    Additionally, this must be done using as little ram as possible. To combat this I will have an output file open for writing the entire time.

    As part of this portion of the project I wrote a test file generator that takes the provided test file and creates new sam entries such as strandedness, wrong UMIs, and duplicates (testGen.py).

    Here is the psuedocode:

        import argparse and possibly gzip

        argparse arguments: input sam, input UMI data, output file (kept alignments), include help documentation

        def BitwiseInterpreter(integer, bitwiseflag):
            '''This function takes a bitwise flag and an int of interest. Returns a true or false using if-else statement comparing integer and bitwiseflag.'''

            input: (4, 64)
            return: false
            input: (4, 6)
            return: true

        def StartPosCalc(CIGARstring, startPos):
            '''This function takes a CIGAR string and starting position from a sam file header and determines the start position for that alignment on the genome to compare possible duplicates to each other. The function will parse the CIGAR string and return the actual start
            int.'''

            input: (2S12M, 102)
            return: 100
            input: (14M, 102)
            return: 102

        Declare dictionary for UMIs and counts (this is not a required)
        add a key for unknown UMIs

        Open UMI file (close file after)
        Save all 96 UMIs into dictionary

        Open input sam and output files
            Initiate for-loop when lines do not start with '@'
                use split function and save variables for bitwise flag, CIGAR string, qname, bp pos, and rname as lines loop
                evaluate bitwise flag, CIGAR string, qname, bp pos using above functions and each time an umi is seen it is added to count dictionary
                If UMI is not recognized, it is immediatly thrown out and count of one added to unknown in dictionary
                    Use conditional statement to compare variables above once the data from two alignments is read in, if start position and UMIs match, the alignment and seq is put into the discard output, else is added to kept output (the first of each read will be kept)




Sam-tools sorting:

    environment: bgmp_star
    sam-tools version: 1.9

    For the python script below to function properly, the sam file need to be sorted by RNAME, then start position.
    Still need to find out if the input or output will be compressed.
    Sam tools sort defaults to sorting by RNAME, then POS which as far as I know is exactly what the python script will need. I will need to verify this. (Leslie verified)

    Info on samtools sort found at: https://www.htslib.org/doc/samtools-sort.html#:~:text=By%20default%2C%20samtools%20tries%20to,be%20deduced%2C%20bam%20is%20selected.

    command:

        $samtools sort <input> -o <output>




VanGordon_deduper.py:

    I was able to get BitwiseInterpreter to function correctly.
    StartPosCalc is also working properly.

    I currently have the script able to compare two lines from the sam file correctly. The challenge now is dealing with the strandedness. 
    I asked Leslie if UMIs from minus strands would be reversecomplimented. Leslie confirmed that the UMIs for this data is not reverse complimented.

    The next big challenge will be dealing with strandedness. My function does not currently take into account whether or not there is soft clipping at the end of a cigar string which would matter for reads that align to the minus strand. Still unsure.

    Talked to Leslie, for reverse aligned strands, I will need to find the right most position to compare possible PCR duplicate alignments to. This involves added "all" of the numbers in the cigar string to the start position aside from left softclipping.
    To solve this I may add a function to StartPosCalc() to account for this.

    I have successfully incorperated strandedness into the python script! Done via StartPosCalc() and BitwiseInterpreter().

    I believe that the script is up and running. Now I am waiting for the file path to the sam file.

    Next, I would like to add summary files to be outputted. 

    I believe the filepath for the sam is: /projects/bgmp/shared/deduper/C1_SE_uniqAlign.sam.




Deduper.sh:

    I wrote a shell script with the following parameters:

        #SBATCH --account=bgmp                    
        #SBATCH --partition=compute               
        #SBATCH --cpus-per-task=8                 
        #SBATCH --mem=32GB                        

        conda activate base

        /usr/bin/time ./VanGordon_deduper.py -f "./C1_SE_uniqAlign.sorted.sam" -o "./DeduplicatedC1_SE_uniqAlign.sam" -u "./STL96.txt" -s "./SummaryDeduplicated.txt"

    slurm-658470.out:

        54.59user 4.67system 1:00.09elapsed 98%CPU (0avgtext+0avgdata 14704maxresident)k
        0inputs+0outputs (0major+3136minor)pagefaults 0swaps




Output:

    The script seems to have worked! 

    Summary of the summary file:

        Summary information about deduplicated <_io.TextIOWrapper name='./C1_SE_uniqAlign.sorted.sam' mode='r' encoding='UTF-8'>

        Alignments before processing: 18186409
        Alignments after processing: 17815093
        Precent surviving: 97.9582775247164%

        UMI	Count
        Unknown	0	0.0%
        duplicate	371316	0.020842776403131882%

    Input file count: 18186474 C1_SE_uniqAlign.sorted.sam
    Output file count: 17815158 DeduplicatedC1_SE_uniqAlign.sam
    Difference: 371316 which matches the number of duplicates that I had.

    To confirm my result and that there were no unknown UMIs, I ran this bash command:

        grep -v "^@" /projects/bgmp/shared/deduper/C1_SE_uniqAlign.sam | cut -f1 | grep -oE "[ACGT]{8}" | sort | uniq -c | wc -l

        This confirmed that there were only 96 UMIs in the original sam file.

        I additionally ran this bash command to see the rough number of duplicates that you could get when just considering the UMI, bitflag, and startposition: 
        
            grep -v "^@" /projects/bgmp/shared/deduper/C1_SE_uniqAlign.sam | cut -f 1,2,4 | grep -Eo "[ATGC]{8}\s[0-9]+\s[0-9]+" | sort | uniq -c | cut -f1 | grep -Eo "[0-9]+" | awk '{if($1>1){sum+=$1-1}}END{print sum}'

            I should get somewhere in the relm of: 4252134

        After going to office hours, Leslie mentioned that we should not be including insertions in the cigar string.
        Mention that does not account for hard clipping in argparse help.
        Need to adjust start position before sorting. I will write another script for this.

        After office hours today I think that I am going to write two python scripts:

            1) This one adds the adjusted start position to a new sam file. After this, I will use samtools sort to sort the file.
            2) The second script will be the actual deduper script.

        ACTUALLY, I will try to us pySam to sort the sam file in the python script.

        It worked! Here is the slurm.out:

            114.13user 5.71system 2:03.26elapsed 97%CPU (0avgtext+0avgdata 961616maxresident)k
            0inputs+16outputs (0major+773812minor)pagefaults 0swaps

        Roughly 25% of the alignments from the original file were duplicates.

        I had to write another version of the script with out using PySam. 

            This time I added optional options for summary files and duplicate files.

        This assignment is now complete. I may revisit to add option for PE alignments.

        Final output:

            Deduplication Complete!
            Command being timed: "./VanGordon_deduper.py -f ./C1_SE_uniqAlign.sorted.sam -o ./results/DeduplicatedC1_SE_uniqAlign.sam -u ./STL96.txt -s ./results/SummaryDeduplicated.txt -d ./results/Duplicates.sam"
            User time (seconds): 60.10
            System time (seconds): 3.34
            Percent of CPU this job got: 98%
            Elapsed (wall clock) time (h:mm:ss or m:ss): 1:04.25
            Average shared text size (kbytes): 0
            Average unshared data size (kbytes): 0
            Average stack size (kbytes): 0
            Average total size (kbytes): 0
            Maximum resident set size (kbytes): 620896
            Average resident set size (kbytes): 0
            Major (requiring I/O) page faults: 0
            Minor (reclaiming a frame) page faults: 620827
            Voluntary context switches: 1281
            Involuntary context switches: 90
            Swaps: 0
            File system inputs: 0
            File system outputs: 0
            Socket messages sent: 0
            Socket messages received: 0
            Signals delivered: 0
            Page size (bytes): 4096
            Exit status: 0

        The new version of the file is identical to the previous version via using $diff on the output and summary files.

        To count chromosome alignments:

            grep -v "^@" DeduplicatedC1_SE_uniqAlign.sam | cut -f3 | sort | uniq -c

             
            
697508
2787018
547615
589839
562160
510818
1113183
576463
627488
564903
1220389
359951
467659
387239
437465
360923
517566
290506
571665

5 
6 
4 
4 
656 
1 
1 
3 
3 
21 
2 
1 
1
1 
1 
17
111
3
294
202002
3
5450
317853
2247


