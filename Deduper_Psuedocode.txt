Deduper Psuedocode

To sequence RNA-seq data, cDNA must be synthesized and amplified. During this, one transcript may duplicate many times. This can be a problem; for example, if one was trying to quantify gene expression, the abundences for each transcript type may be skewed due to amplifacation.
One way to combat this is through UMIs. These can be used to remove duplicate seqeunces due to PCR amplifacation. Additionally, to locate duplicates, the position of the sequence must be known on the genome. Due to soft clipping, this may not be straight forward but the CIGAR 
string will contain information regarding wether or not the reads are soft clipped as the program will be taking a sam file as an input. The input file is from single end seq. The input sam will also be in order. Below is the psuedocode for this program.


import argparse and possibly gzip


argparse arguments: input sam, input UMI data, output file (kept alignments), include help documentation


def BitwiseInterpreter(integer, bitwiseflag):
    '''This function takes a bitwise flag and an int of interest. Returns a true or false using if-else statement comparing integer and bitwiseflag.'''

    input: (4, 64)
    return: false
    input: (4, 6)
    return: true

def StartPosCalc(CIGARstring, startPos):
    '''This function takes a CIGAR string and starting position from a sam file header and determines the start position for that alignment on the genome to compare possible duplicates to each other. The function will parse the CIGAR string and return the actual start
    int.'''

    input: (2S12M, 102)
    return: 100
    input: (14M, 102)
    return: 102


Declare dictionary for UMIs and counts (this is not a required)
add a key for unknown UMIs


Open UMI file (close file after)
Save all 96 UMIs into dictionary

Open input sam and output files
    Initiate for-loop when lines do not start with '@'
        use split function and save variables for bitwise flag, CIGAR string, qname, bp pos, and rname as lines loop
        evaluate bitwise flag, CIGAR string, qname, bp pos using above functions and each time an umi is seen it is added to count dictionary
        If UMI is not recognized, it is immediatly thrown out and count of one added to unknown in dictionary
            Use conditional statement to compare variables above once the data from two alignments is read in, if start position and UMIs match, the alignment and seq is put into the discard output, else is added to kept output (the first of each read will be kept)



